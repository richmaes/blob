#!/usr/bin/perl

# ------------------------------------------------------------------------------------------
# Date        :  
# Host        : 
# Filename    : qsim_script.pl
# Description : A testbench example script that unpackages IP and launches a Questa
#               simulation.
# ------------------------------------------------------------------------------------------

# Kristen Software License - Version 1.0 - January 1st, 2019
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by 
# this license (the "Software") to use, reproduce, display, distribute,      
# execute, and transmit the Software, and to prepare derivative works of the 
# Software, and to permit third-parties to whom the Software is furnished to 
# do so, all subject to the following:                                       
#                                                                            
# The copyright notices in the Software and this entire statement, including 
# the above license grant, this restriction and the following disclaimer,    
# must be included in all copies of the Software, in whole or in part, and   
# all derivative works of the Software, unless such copies or derivative     
# works are solely in the form of machine-executable object code generated by
# a source language processor.                                               
#                                                                            
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT  
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE  
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.                                                  


use Getopt::Long;
use Cwd;
Getopt::Long::Configure("pass_through");

my $cmd_options = "@ARGV";
my $lib_path = "questa_lib";
my $precompile_list = "../common/questa_precompile.tcl";
# my $opt_range = "everything";
my $opt_snapshot = NULL;
my $opt_snapshot_switch = "";
my $opt_snapshot_functional_sim = "";
my $opt_snapshot_behave = "";
my $testfile_without_extension = "";
my $fh;
$opt_platform = "xupp3r"; #build the XUPP3R by default
$test_size = 0;


$opt_testfile = NULL; 


# System check  observed the return code of a system command and makes an appropriate
# printf to flag the issue
sub system_check  {
    my ($system_cmd) = @_;
    print("$system_cmd\n");
    system($system_cmd);
    
    if ($? == -1) {
        print "failed to execute: $!\n";
        exit($?);
    }
    elsif ($? & 127) {
        printf "child died with signal %d, %s coredump\n",
        ($? & 127),  ($? & 128) ? 'with' : 'without';
        exit($?);
    }
    elsif ($? >= 128) {
         printf "  irun_script.pl exits with code %d.\n", $?;
        exit($?);
    }
    else {
        printf "  Done with code %d.\n", $?;
    }
}


# specify the log file location
# specify wheter we are performing a precompile operation
&GetOptions ("platform=s", "testfile=s", "logfile=s", "precompile!", "range=s", "help!", "verbose=s", "stoperror!", "gui", "snapshot=s", "clean!", "db", "libonly", "stop!", "iponly!", "dbgpcie");

if ($opt_help) {
    print("------------------------------------------------------------\n");
    print("qsim_script.pl - Kristen simulation script for Mentor Questa\n");
    print("Copyright 2018-2019 Xmissile, LLC.\n");
    print("-------------------------------------------------------------\n\n");
    print("Runs a demo simulation of the cour host design.\n");
    print(" -platform  Build IP for a specifc platform test.\n");
    print(" -gui       Launch graphical simulation.\n");
    print(" -db        Build full debug database.\n");
    print(" -logfile   Define a log file for output storage.\n");
    print(" -range     Range of tests to run. ex -r 0-2,3,7-9\n");
    print(" -stoperror Stop on detection of a simulation error.\n");
    print(" -testfile  Test file to execute.\n");
    print(" -stop      Stop on Error.\n");
    print(" -clean     Clean simulation files.  Does not clean xilinx_lib.\n");
    print(" -libonly   Build libraries only.\n");
    print(" -help      Display help screen.\n");
    print("\n");
    exit(0);
}

$simulator_path = "";
$do_tcl_file = "";
$wave_file = "";
$tests = "";
$std_compile_opt  = "";
$xsim_options = "";
$elab_options = "";
$libraries = "";

if ($opt_platform eq "xupp3r") {
    system_check("echo \"\\`define IS_VU9P 1\" > ../../design/rtl/ilsa_part.vh");
} elsif ($opt_platform eq "xupvv4") {
    system_check("echo \"\\`define IS_VU13P 1\" > ../../design/rtl/ilsa_part.vh");
} else {
    print("ERROR: Unknown platform set.  Available platforms are xupp3r and xupvv4\n");
    exit(0);
}

#Skip making simulation libraries if this is a IP only request
if (! $opt_iponly) {
   
   if (defined $ENV{'MODELSIM_PATH'}) {
      $simulator_path = $ENV{'MODELSIM_PATH'};
   } else {
       print("ERROR: Simulator environment variable not set.  Set MODELSIM_PATH to installation root.\n");
       exit;
   }
   
   
   
   if ($opt_testfile eq NULL) {
       print("testfile name must be specified.\n");
       exit;
   }
   ($testfile_without_extension = $opt_testfile) =~ s/\.[^.]+$//;
   $do_tcl_file = "$testfile_without_extension" . ".do";
   $wave_file = "$testfile_without_extension" . ".wlf";
   
   if ($opt_snapshot eq NULL) {
       $opt_snapshot = $testfile_without_extension;
       $opt_snapshot_behave = "$opt_snapshot" . "_behave";
       $opt_snapshot_switch = " --snapshot $opt_snapshot_behave";
       $opt_snapshot_functional_sim = " -key {Behavioral:sim_1:Functional:" . $testfile_without_extension . "}";   
   }
   if ($opt_range eq "") {
       $opt_range = "everything";
   }
   
   if ($opt_range =~ /everything/) {
       $test_size = 32;
       for ($i = 0;$i < $test_size; $i = $i + 1) {
          $tests = "1" . $tests;
       }
   } else {
       @range_substrs = split(",",$opt_range);
       foreach $range_substr (@range_substrs) {
           ($range_start, $range_end) = split ("-", $range_substr);
   
           # check if the end is NULL as that means there was no - or end for that matter
           if ($range_end == NULL) {
               if ($range_start >= $test_size) {
                   $test_size = $range_start + 1;
               }
               if (length($tests) < $test_size) {
                   my $bits_to_add = $test_size - length($tests);
                   for ($str_index = 0; $str_index < $bits_to_add; $str_index = $str_index + 1) {
                       $tests = "0" . $tests;
                   }
               }
               substr($tests,$test_size-($range_start+1),1) = "1";
           } else {
               #order the range make sure that $start is less than $end
               if ($range_start > $range_end) {
                   $tmp = $range_start;
                   $range_start = $range_end;
                   $range_end = $tmp;
               }
               if ($range_end >= $test_size) {
                   $test_size = $range_end + 1;
               }
   
               if (length($tests) < $test_size) {
                   my $bits_to_add = $test_size - length($tests);
                   for ($str_index = 0; $str_index < $bits_to_add; $str_index = $str_index + 1) {
                       $tests = "0" . $tests;
                   }
               }
               for ($str_index = $range_start; $str_index <= $range_end; $str_index = $str_index + 1) {
                  substr($tests,$test_size-($str_index+1),1) = "1";
               }
           }
       }
   }
   
   my $uc_define_filename;
   $uc_define_filename = $testfile_without_extension . ".vh";
   open($fh, ">", $uc_define_filename)
     or die "Can't open > " . $uc_define_filename;
   
   print $fh "// -----------------------------------------------------------\n";
   print $fh "// $testfile_without_extension" . ".vh                                         \n";
   print $fh "// Generated file specifies which numerical test cases to run.                 \n";
   print $fh "// Kristen Software License - Version 1.0 - January 1st, 2019                  \n";
   print $fh "//                                                                             \n";
   print $fh "// Permission is hereby granted, free of charge, to any person or organization \n";
   print $fh "// obtaining a copy of the software and accompanying documentation covered by  \n";
   print $fh "// this license (the \"Software\") to use, reproduce, display, distribute,     \n";
   print $fh "// execute, and transmit the Software, and to prepare derivative works of the  \n";
   print $fh "// Software, and to permit third-parties to whom the Software is furnished to  \n";
   print $fh "// do so, all subject to the following:                                        \n";
   print $fh "//                                                                             \n";
   print $fh "// The copyright notices in the Software and this entire statement, including  \n";
   print $fh "// the above license grant, this restriction and the following disclaimer,     \n";
   print $fh "// must be included in all copies of the Software, in whole or in part, and    \n";
   print $fh "// all derivative works of the Software, unless such copies or derivative      \n";
   print $fh "// works are solely in the form of machine-executable object code generated by \n";
   print $fh "// a source language processor.                                                \n";
   print $fh "//                                                                             \n";
   print $fh "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n";
   print $fh "// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    \n";
   print $fh "// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT   \n";
   print $fh "// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE   \n";
   print $fh "// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, \n";
   print $fh "// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n";
   print $fh "// DEALINGS IN THE SOFTWARE.                                                   \n";
   print $fh "                                                                               \n";
   print $fh "// GENERATED FILE - DO NOT MODIFY THIS FILE MANUALLY.                          \n";
   
   
   
   
   print $fh "// -----------------------------------------------------------\n";
   print $fh "\n";
   print $fh "`ifndef " . uc $testfile_without_extension . "_RUN_TESTS_TEST_CASES\n";
   print $fh "`define " . uc $testfile_without_extension . "_RUN_TESTS_TEST_CASES  1\n";
   print $fh "`define TEST_CASE_RANGE $test_size\n";
   print $fh "`define TEST_CASES $test_size\'b$tests\n";
   print $fh "`define TEST_NAME " . uc $testfile_without_extension . "\n";
   print $fh "`define TEST_NAME_STR \"" . uc $testfile_without_extension . "\"\n";
   if ($opt_stop) {
      print $fh "`define TEST_STOP_ON_ERROR 1\n";
      print $fh "`define TEST_STOP_ON_ERROR_LIMIT 1\n";
   }
   print $fh "`define VERBOSE 0\n";
   print $fh "`endif // " . uc $testfile_without_extension . "_RUN_TESTS_TEST_CASES\n";
   close $fh;
   
   
   # ----------------------------------------------
   # Formulate standard options for compilation
   # ----------------------------------------------
   
      $std_compile_opt .= " -64";
      # if ($opt_logfile eq "") {
      #     $std_compile_opt .= " -l $testfile_without_extension" . ".log";
      # } else {
      #     $std_compile_opt .= " -l $opt_logfile";
      # }
      # $std_compile_opt .= " -timescale \"1 ps / 1 ps\"";
      if ($opt_dbgpcie) {
	    $std_compile_opt .= " +define+PCIE_DEBUG_APP";
      }
      $std_compile_opt .= " +define+SIMULATION";
      # These next two are U54 specific defines for memory initializtion
      $std_compile_opt .= " +define+RANDOMIZE_DELAY=1";
      $std_compile_opt .= " +define+RANDOMIZE_REG_INIT";
      $std_compile_opt .= " +define+RANDOMIZE_MEM_INIT";
      # This next warning prevents certain timescale issues from becomming errors
      $std_compile_opt .= " -warning 3009";
   
   # ----------------------------------------------
   # Formulate simulation options
   # ----------------------------------------------

   if ($opt_gui) {
      $xsim_options .= " -gui";
   } else {
      $xsim_options .= " -c";
   }
   $xsim_options .= " -warning 3009";
   if ($opt_db) {
      $xsim_options .= " -debugdb=$testfile_without_extension" . ".dbg";
      $elab_options .= " -debugdb=$testfile_without_extension" . ".dbg";
   }
   
   print ("Checking to see if $do_tcl_file exists.\n");
   if (-e $do_tcl_file) {
       if ($opt_gui) {
           print("$do_tcl_file exists.\n");
           $xsim_options .= " -do $do_tcl_file";
       } elsif (-e "run.do") {
   	$xsim_options .= " -do run.do";
       }
   } elsif (-e "run.do") {
       print("No $do_tcl_file file found.  Using run.do by default.\n");
       $xsim_options .= " -do run.do";
   }
   
   
   if (-e $wave_file) {
       $xsim_options .= " -wlf $wave_file";
   }
   
   $xsim_options .= " -l $testfile_without_extension" . ".testlog";
   
   # ----------------------------------------------
   # Build Vivado Libs for usage by all simulations
   # ----------------------------------------------
   if (!(-d "../$lib_path")) {
       print ("Xilinx libraries must be created.\n");
       # -------------------------------------------------------
       # The Xilinx library was not found so we need to build it
       # -------------------------------------------------------
   
       my $current_working_directory = cwd();
       # -------------------------------------------------------
       # Move to our build directory and start the build process
       # -------------------------------------------------------
       chdir("../") or die "Stragely enough, we cannot cd to ../ \nCowardly refusing to continue this endevor.  $!\n";
   
       # -------------------------------------------------------
       # Make our new build directory for the Xilinx library
       # -------------------------------------------------------
       mkdir("$lib_path") or die "ERROR: Unable to create directory $lib_path: $!\n";
       chdir("$lib_path") or die "ERROR: Unable to change directory to $lib_path: $!\n";
   
       
       system("vivado -mode batch -source $precompile_list");
   
       chdir("$current_working_directory") or die "ERROR: Unable to change directory to $current_working_directory: $!\n";
   
       print ("Xilinx libraries are complete.\n");
       if ($opt_libonly) {
   	exit;
       }
   
   }
   
   # Kristen Application Note:
   #        There is an issue describe here https://www.xilinx.com/support/answers/47724.html (ModelSim - Fatal: (vsim-3729) 
   #        that indicates unisms_ver must be loaded prior to unisim otherwise Error vsim-3729 will occur.  Thus unisims_ver
   #        is to the left of unisim in the list below.
   @libs = ("xil_defaultlib","xpm","microblaze_v10_0_7","lib_cdc_v1_0_2","proc_sys_reset_v5_0_12",
            "lmb_v10_v3_0_9","lmb_bram_if_cntlr_v4_0_15","blk_mem_gen_v8_4_1","iomodule_v3_1_3",
   	 "unisims_ver","unisim","unimacro_ver","secureip","gtwizard_ultrascale_v1_7_4","xdma_v4_1_1",
            "blk_mem_gen_v8_3_6","axi_bram_ctrl_v4_0_14","axi_lite_ipif_v3_0_4","interrupt_control_v3_1_4",
            "axi_gpio_v2_0_19","lib_pkg_v1_0_2","lib_srl_fifo_v1_0_2","axi_uartlite_v2_0_21", 
            "generic_baseblocks_v2_1_0","axi_infrastructure_v1_1_0","axi_register_slice_v2_1_17", 
            "fifo_generator_v13_2_2","axi_data_fifo_v2_1_16","axi_crossbar_v2_1_18","axi_mmu_v2_1_15", 
            "axi_protocol_converter_v2_1_17","axi_clock_converter_v2_1_16","axi_dwidth_converter_v2_1_17",
   	 "xilinx_vip", "axi_vip_v1_1_3", "mailbox_v2_1_10");
   
   foreach $library (@libs) {
       print(" Adding $library\n");
       $libraries = "$libraries -L $library";  
   }
}

my $ip_path = "../../design/ip";
my $managed_ip_path = $ip_path . "/ip_user_files";
$my_return_path = getcwd();

#Clean stuff first
if ($opt_clean) {
    if (-e "$ip_path/managed_ip_project") {
	system_check("rm -rf $ip_path/managed_ip_project");
    }

    if (-e "$ip_path/ip_user_files") {
	system_check("rm -rf $ip_path/ip_user_files");
    }

    if (-e "$ip_path/axi_interconnect") {
	system_check("rm -rf $ip_path/axi_interconnect");
    }

    if (-e "../questa_lib/work") {
	system_check("rm -rf ../questa_lib/work");
    }

    if (-e "../questa_lib/msim") {
	system_check("rm -rf ../questa_lib/msim");
    }

    if (-e "modelsim.ini") {
	system_check("rm -rf modelsim.ini");
    }

    if (-e "questa_lib") {
	system_check("rm -rf questa_lib");
    }

    if (-e "qsim") {
	system_check("rm -rf qsim");
    }

    system("rm -f *.log *.jou");
}

# Make Managed IP's that don't require block diagrams

if (! -e "$ip_path/managed_ip_project") {
    chdir "$ip_path";
    if ( -e "managed_ip_project.tcl") {
        system_check("vivado -mode batch -source managed_ip_project.tcl -tclargs --platform $opt_platform");
    }
    chdir "$my_return_path";
}

print("Processing XCIX IP's\n");
@basicxcixs = ("blk_mem_gen_0","axi_bram_ctrl_1");
foreach $xcix (@basicxcixs) {
   my $xcix_name = "$xcix.xcix";
   if(-e "$ip_path/$xcix_name") {
       print "Processing $ip_path/$xcix_name\n";
       system_check("unzip -uo $ip_path/$xcix_name -x cc.xml -d $ip_path");
   }
}
print("Done processing XCIX IP's\n");


# Check to make sure simulation scripts have been made

@xcixs = "";;
# @xcixs = ("axi_vip_xdma_master","axi_vip_xdmal_master","ddr4_0","xdma_0");
$questa_lib_path = "../../../../../../testbench/questa_lib";
foreach $xcix (@xcixs) {
    if ($xcix eq "") {
        print "hello\n";
    }
    elsif (! -e "$managed_ip_path/sim_scripts/$xcix/questa/$xcix.sh") {
	print ("ERROR:  An quest simulation script for $xcix was not found at $managed_ip_path/sim_scripts/$xcix/questa/$xcix.sh.\n");
	exit;
    } else {
	# Add own compiler script next to the generated script
	if (! -e "$managed_ip_path/sim_scripts/$xcix/questa/compile.sh") {
	    system("cp $ip_path/compile.sh $managed_ip_path/sim_scripts/$xcix/questa/compile.sh");
	    system("chmod 755 $managed_ip_path/sim_scripts/$xcix/questa/compile.sh");
	    system_check("grep -rl questa_lib $managed_ip_path/sim_scripts/$xcix/questa/*.do | xargs sed -i 's+questa_lib+$questa_lib_path+g'");
	    #Special handling for XDMA for simulation
	    if ($xcix eq "xdma_0") {
	        $srch_str = "work xil_defaultlib";
	        $rplc_str = "work xil_defaultlib \"+define+SIMULATION\" \"+define+SIMULATION_MODE\"";
	        system_check("grep -rl $srch_str $managed_ip_path/sim_scripts/$xcix/questa/*.do | xargs sed -i 's/$srch_str/$rplc_str/g'");
	    }
	}
    }
} 




# Making Block Diagram IP's via TCL script.
print("Processing Block Diagram IP's\n");
$wrapper = "_wrapper";
$questa_lib_path = "../../../../../../testbench/questa_lib";
@xilinx_bd_tcls = ("axi_interconnect");
foreach $bd_tcl (@xilinx_bd_tcls) {
   print "Checking to see if we need to make $bd_tcl... ";
   if ($opt_clean) {
      # Only clean it up if it exists
      if (-e "$ip_path/$bd_tcl" ) {
      print "Cleaning... ";
      system_check ("rm -rf $ip_path/$bd_tcl");
      }
   }
   if (! -e "$ip_path/$bd_tcl") {
      print "$ip_path/$bd_tcl not found... ";
      if ( -e "$ip_path/$bd_tcl.tcl") { 
         print "Building.\n";
         chdir "$ip_path";
         system_check("vivado -mode batch -source $bd_tcl.tcl -tclargs --platform $opt_platform");
	 print("cp $ip_path/compile.sh $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh\n");
	 system("cp $ip_path/compile.sh $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh");
	 system("chmod 755 $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh");
	 system_check("grep -rl questa_lib $managed_ip_path/sim_scripts/$bd_tcl/questa/*.do | xargs sed -i 's+questa_lib+$questa_lib_path+g'");
	 print ("libpath $questa_lib_path\n");
         chdir "$my_return_path";
      }
   } else {
       print "$bd_tcl exists, skipping build.\n";
       print "Checking if compile.sh exists...";
       if (! -e "$managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh") {
	   chdir "$ip_path";
	   print("cp $ip_path/compile.sh $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh\n");
	   system("cp $ip_path/compile.sh $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh");
	   system("chmod 755 $managed_ip_path/sim_scripts/$bd_tcl/questa/compile.sh");
	   system_check("grep -rl questa_lib $managed_ip_path/sim_scripts/$bd_tcl/questa/*.do | xargs sed -i 's+questa_lib+$questa_lib_path+g'");
	   print ("libpath $questa_lib_path\n");
           chdir "$my_return_path";
       }
   }
}
print("Done processing Block Diagram IP's\n");

if ($opt_iponly) {
    print("IP Generation Complete.\nExiting.\n");
    exit;
}

# ----------------------------------------------
# Compile 
# ----------------------------------------------
# 
# 
$lib_map_path = "$my_return_path/../$lib_path";
foreach $bd_tcl (@xilinx_bd_tcls) {
    chdir "../../design/ip/$managed_ip_path/sim_scripts/$bd_tcl/questa";
    $wrapperSh = "./compile.sh";
    print(getcwd() . "\nwrapperSh = $wrapperSh\n");
     if ( -e "$wrapperSh") {
	 system("$wrapperSh -lib_map_path $lib_map_path");
         #system_check("./$bd_tcl$wrapper.sh -lib_map_path ../../$lib_path");
     } else {
	 print ("ERROR: $wrapperSh does not exist.\n");
	 exit;
     }
     chdir "$my_return_path"; 
}

print("Compiling managed IP's\n");
foreach $xcix (@xcixs) {
    # We are using our own version of the compile script called compile.sh
    print ("Compiling Managed IP $xcix\n");
    $xcixSh = "./compile.sh";
    chdir "../../design/ip/$managed_ip_path/sim_scripts/$xcix/questa";
    if (-e "$xcixSh") {
	print("$xcixSh -lib_map_path $lib_map_path\n");
	system("$xcixSh -lib_map_path $lib_map_path");
    } else {
	print("ERROR: $xcixSh does not exist.\n");
	exit;
    }
    print("finished compiling $xcixSh\n");
    print(getcwd() . "\n");
    chdir "$my_return_path";
}    


# ----------------------------------------------
# Prepare to compile the test files which are unique per test 
# ----------------------------------------------
$compiler_ini = "$simulator_path/share/modeltech/modelsim.ini";

if (-e $compiler_ini) {
    system_check("cp $compiler_ini .");
    system_check("chmod 755 modelsim.ini");
} else {
    print ("ERROR: Compiler file $compiler_ini not found.\n");
    exit;
}

print("Creating test level library\n");
foreach $library (@libs) {
    $myVmap = "";
    if (-e "../questa_lib/$library") {
	$myVmap = "vmap $library ../questa_lib/$library";
    } elsif (-e "../questa_lib/msim/$library") {
        $myVmap = "vmap $library ../questa_lib/msim/$library";
    } else {
	print ("ERROR: Didn't find library $library in ../questa_lib or in ../questa_lib/msim\n");
	exit;
    }
    print("$myVmap\n");
    system_check("$myVmap");
}

print("Compiling U54 Core\n");
# chdir ("../../design/ip/$managed_ip_path/sim_scripts/$xcix/questa");
$my_u54 = "$ip_path/sifive_u54/u54_vlog.prj";
if (-e $my_u54) {
    system_check("vlog $std_compile_opt -F $my_u54");
} else {
    print("ERROR: $my_u54 does not exist.\n");
    exit;
}

if ($opt_dbgpcie) {
    system_check("vcom -work xil_defaultlib -64 -93 ../../design/ip/axi_bram_ctrl_1/sim/axi_bram_ctrl_1.vhd");
    system_check("vlog $std_compile_opt -sv $libraries -work xil_defaultlib -F ../common/pcie_debug.prj");
}

# The DDR4 has a couple options for the testbench side.  Currently using a Xilinx model of a Micron DDR4
system_check("vlog $std_compile_opt -sv -64 -work xil_defaultlib -F ../common/ddr4_mta18asf_vlog.prj");

# Make the Kristen generated code
system_check("vlog $std_compile_opt -F ../../design/generated/questa_kristen_generated.prj");

print("Compiling Ilsa Core\n");
system_check("vlog $std_compile_opt -sv -work xil_defaultlib -F ../common/ilsa_core.prj");
 
print("Compiling Ilsa Top\n");
system_check("vlog $std_compile_opt -sv -work xil_defaultlib -F ../common/ilsa_top_vlog.prj");
system_check("vcom -64 -93 -work xil_defaultlib -F ../common/ilsa_top_vhdl.prj");


chdir "$my_return_path"; 





# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.ddr4_0 xil_defaultlib.glbl -o ddr4_0_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.xdma_0 xil_defaultlib.glbl -o xdma_0_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.U54MC_UCoreIPSubsystem xil_defaultlib.glbl -o U54MC_UCoreIPSubsystem_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.axi_interconnect_wrapper xil_defaultlib.glbl -o axi_interconnect_wrapper_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.ilsa_mpi  -o ilsa_mpi_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.ilsa_axilite_mpi_bridge  -o ilsa_axilite_mpi_bridge_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.ilsa_core  -o ilsa_core_opt");
# system_check("vopt -64 +acc -l elaborate.log $libraries -work xil_defaultlib xil_defaultlib.ilsa_top xil_defaultlib.glbl   -o ilsa_top_opt");

# Now build the testbench
if (! -e "qsim") {
    system_check("mkdir qsim");
}
system_check("vlib qsim/$testfile_without_extension");
system_check("vmap $testfile_without_extension qsim/$testfile_without_extension");
system_check("vlog -sv $std_compile_opt  $libraries -work $testfile_without_extension -F ../common/tb_verilog.prj");
system_check("vlog -sv $std_compile_opt  $libraries -work $testfile_without_extension \"+incdir+../../design/generated\" $opt_testfile");

# Elaborate the design
$optimized_file = $testfile_without_extension . "_opt";
system_check("vopt $std_compile_opt +acc -l $testfile_without_extension.log $libraries $elab_options -work $testfile_without_extension $testfile_without_extension.$testfile_without_extension xil_defaultlib.glbl -o $optimized_file");


# ----------------------------------------------
# Simulate 
# ----------------------------------------------
system_check("vsim $testfile_without_extension.$optimized_file $xsim_options");
